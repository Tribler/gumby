#!/usr/bin/env python2
# create_conf.py ---
#
# Filename: create_conf.py
# Description:
# Author: Elric Milon
# Maintainer:
# Created: Thu Nov 21 15:25:41 2013 (+0100)

# Commentary:
#
#
#
#

# Change Log:
#
#
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth
# Floor, Boston, MA 02110-1301, USA.
#
#

# Code:

from os import path, walk
from sys import argv

WHITELISTED_EXTENSIONS = ('py', 'sh', 'c', 'pl', 'r', )
BLACKLISTED_DIRS = ('.git', '.svn', 'output', 'temp', 'tmp')

CONF_MARKER = '@CONF_OPTION'

DOC_MARKER = '%*%'

CONFIG_FILE_HEADER = '''\
# This is a gumby experiment config file
#
# There's a single config option required for a gumby experiment:
#
# experiment_name =
#
# To add functionality to the experiment you will need to set some/all of the following options:
#
# Please, add a descriptive header so other people can understand the purpose of this experiment and remove anything not relevant.
#
###
### Gumby core configuration options:
###
#
# Directory where to store the output files generated by your experiment and the helper scripts.
# Defaults to "output"
# workspace_dir =
#
# Comma separated list of nodes to run the remote_* commands (they can be das4 head nodes or any UNIX host with SSH and rsync installed)
# Take into account that if you use a single node you still need to add a comma at the end.
# head_nodes = node1,node2,node3
#
# Command used to start a tracker in the background during the whole duration of the experiment.
# If the tracker exits before the experiment finishes, the experiment will abort to avoid wasting time.
# The tracker will be killed by gumby when the experiment finishes.
# tracker_cmd =
#
# Set this to true if you want the tracker to be started on each remote node instead of locally.
# Defaults to false
# tracker_run_remote =
#
# Which port should the tracker use?
# Defaults to 7788
# tracker_port =
#
# Command used to start the experiment synchronization server in case you need one, if the experiment sync server exits with status 0,
# the experiment will _not_ be canceled.
# experiment_server_cmd =
#
# Set this to true if you want the experiment synchronization server to be started on each of the remote nodes.
# Defaults to false
# experiment_server_run_remote =
#
# Command used to locally set up the all the stuff needed to set up the experiment (dependencies, compilations, etc.)
# This will be executed in parallel with the remote counterparts (see below)
# local_setup_cmd =
#
# Same than local_setup_cmd, but executed in each of the remote nodes.
# remote_setup_cmd =
#
# Command used to start (the local part of) the experiment. This will be executed concurrently with its remote counterpart if set (see below)
# local_instance_cmd =
#
# Command used to start (the remote part of) the experiment. This will be executed concurrently with its local counterpart if set (see above)
# remote_instance_cmd =
#
# Command used to post-process the data obtained from the experiment (aggregate data, graph stuff, etc.), this command will be run locally.
# post_process_cmd =
#
# Use a virtualenv locally? (see http://www.virtualenv.org/en/latest/virtualenv.html if you don't know what this is)
# Defaults to true
# use_local_venv =
#
# Virtualenv to use
# Defaults to $HOME/venv
# virtualenv_dir =
#
###
### Other stuff
###
#
# Gumby already offers a bunch of scripts that will allow you to quickly set up an experiment.
#
# From this point on you can find an auto-generated list of available scripts and its options available at the moment
# of creation of this config file. Take into account that some of the config options are required if you are going to use it.
#
'''
if __name__ == '__main__':
    if len(argv) != 2:
        print "Usage:\n    %s experiments/myexperiment/myconfig.conf" % argv[0]
        exit(3)
    config_file_path = argv[1]
    config_file_dir = path.dirname(config_file_path)
    if not path.exists(config_file_dir):
        print "Directory %s does not exist, please create it first." % config_file_dir
        exit(2)

    if path.exists(config_file_path):
        print "Specified output file already exists, bailing out."
        exit(1)
    else:
        config_file = open(config_file_path, 'w')
        config_file.write(CONFIG_FILE_HEADER)

    self_abspath = path.abspath(__file__)
    gumby_root = path.abspath(path.join(path.dirname(__file__), '..'))
    print "Gumby root is:", gumby_root
    for dirpath, dirnames, filenames in walk(gumby_root):
        print '* Entering', dirpath
        # Remove blackisted dirs so we don't recurse into them
        for dir_ in BLACKLISTED_DIRS:
            if dir_ in dirnames:
                dirnames.remove(dir_)

        filenames.sort()
        for filename in filenames:
            if filename.split('.')[-1].lower() in WHITELISTED_EXTENSIONS and not filename.startswith('.'):
                file_abspath = path.join(dirpath, filename)
                # Do not scan ourselves
                if file_abspath != self_abspath:
                    config_opts = {}
                    doc_lines = []
                    print '  * Scanning:', file_abspath
                    for line in open(file_abspath, 'r').readlines():
                        if CONF_MARKER in line:
                            name, description = [piece.strip() for piece in line.strip().split(CONF_MARKER, 1)[1].split(':', 1)]
                            print '   - Found:', name
                            name = name.lower()
                            config_opts[name] = config_opts[name]+'\n# '+description if name in config_opts else description
                        if DOC_MARKER in line:
                            doc_line = line.strip().split(DOC_MARKER, 1)[1].strip()
                            doc_lines.append(doc_line)

                    if config_opts or doc_lines:
                        file_relpath = path.relpath(file_abspath, gumby_root)
                        config_file.write('\n\n###\n### %s:\n###\n#\n' % file_relpath)
                        if doc_lines:
                            for line in doc_lines:
                                config_file.write('# %s\n' % line )
                            config_file.write('#\n')
                        if config_opts:
                            config_file.write('# Config options:\n#\n' )
                            for config_opt in config_opts.iteritems():
                                config_file.write('# %s\n# %s = \n#\n' % tuple(reversed(config_opt)))

#
# create_conf.py ends here
